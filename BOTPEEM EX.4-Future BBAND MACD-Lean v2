// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © PeeMMiumm

//@version=5
strategy('BOTPEEM EX.4-Future BBAND MACD-Lean', overlay=true, default_qty_type=strategy.cash, currency=currency.USD, initial_capital=100000, commission_type=strategy.commission.percent, commission_value=0.02, process_orders_on_close=true, calc_on_every_tick=true, calc_on_order_fills=true)
//TIME
TIME_NOW = time
//plotchar(TIME_NOW,"timenow")
plot(timenow, display=display.none)

// ========================================= BACK TEST =================================================
// === INPUT BACKTEST RANGE ===
fromMonth = input.int(defval = 1,    title = "From Month",  minval = 1, maxval = 12 ,group='BACKTEST')
fromDay   = input.int(defval = 1,    title = "From Day",    minval = 1, maxval = 31 ,group='BACKTEST')
fromYear  = input.int(defval = 2021, title = "From Year",   minval = 1970           ,group='BACKTEST')
thruMonth = input.int(defval = 1,    title = "Thru Month",  minval = 1, maxval = 12 ,group='BACKTEST')
thruDay   = input.int(defval = 1,    title = "Thru Day",    minval = 1, maxval = 31 ,group='BACKTEST')
thruYear  = input.int(defval = 2112, title = "Thru Year",   minval = 1970           ,group='BACKTEST')

// === INPUT SHOW PLOT ===
showDate  = input(defval = true, title = "Show Date Range"  ,group='BACKTEST')

// === FUNCTION EXAMPLE ===
start     = timestamp(fromYear, fromMonth, fromDay, 00, 00)            // backtest start  window
finish    = timestamp(thruYear, thruMonth, thruDay, 23, 59)            // backtest finish window
window()  => time >= start and time <= finish ? true : false           // create function "within window of time"

bgcolor(color = showDate and window() ? color.new(color.gray, 90) : na) 
//===============================================================================================================

// >> ON-OFF  LONG-SHORT
ONOFF_LONG = input.bool(title='ON_LONG', defval=true, group='ON=OFF')
ONOFF_SHORT = input.bool(title='ON_SHORT', defval=true, group='ON=OFF')

// >> ON-OFF  INDICATOR
ONOFF_EMA_MIDDLE = input.bool(title='ON_EMA_MID', defval=true, group='ON=OFF-INDICATOR')
ONOFF_BB_Basis = input.bool(title='ON_BB_Basis', defval=false, group='ON=OFF-INDICATOR')
ONOFF_TLS = input.bool(title='ON_TLS', defval=true, group='ON=OFF-INDICATOR')
ONOFF_TIME_Delay = input.bool(title='ONOFF_TIME_Delay', defval=false, group='ON=OFF-INDICATOR')

// >> A. all input variable

EMA_SHORT = input.int(title='EMA_SHORT', defval=8, group='EMA CONFIG')
EMA_MIDDLE_LONG = input.int(title='EMA_MIDDLE_LONG', defval=14, group='EMA CONFIG')
EMA_MIDDLE_SHORT = input.int(title='EMA_MIDDLE_SHORT', defval=14, group='EMA CONFIG')
EMA_LONG = input.int(title='EMA_LONG', defval=100, group='EMA CONFIG')
SD_EMA_MIDDLE_STOP = input.int(title='SD_EMA_STOP', defval=0, group='EMA CONFIG')

// >> B. plot ema line
EMA_SHORT_LINE = ta.ema(close, EMA_SHORT)
EMA_MIDDLE_LINE_LONG = ta.sma(close, EMA_MIDDLE_LONG)
EMA_MIDDLE_LINE_SHORT = ta.sma(close, EMA_MIDDLE_SHORT)
EMA_LONG_LINE = ta.ema(close, EMA_LONG)
EMA_LONG_LINE100 = ta.ema(close, 30)

plot(EMA_SHORT_LINE, 'EMA_SHORT_LINE', color=color.new(color.green, 0))
plot(EMA_MIDDLE_LINE_LONG, 'EMA_MIDDLE_LINE_LONG', color=color.new(color.yellow, 0))
plot(EMA_MIDDLE_LINE_SHORT, 'EMA_MIDDLE_LINE_SHORT', color=color.new(color.purple, 0))
plot(EMA_LONG_LINE, 'EMA_LONG_LINE', color=color.new(color.white, 0))
plot(EMA_LONG_LINE100, 'EMA_LONG_LINE100', color=color.new(color.silver, 0))

//plot EMA Middle SIGNALS
long_shape_EMA_MIDDLE = close >= EMA_MIDDLE_LINE_LONG
short_shape_EMA_MIDDLE = close < EMA_MIDDLE_LINE_SHORT
plotchar(long_shape_EMA_MIDDLE, 'long_shape_EMA_MIDDLE')
plotchar(short_shape_EMA_MIDDLE, 'short_shape_EMA_MIDDLE')

//SIGNAL EMA_MIDDLE 
SIGNALS_EMA_MIDDLE = long_shape_EMA_MIDDLE == 1 ? true : short_shape_EMA_MIDDLE == 1 ? false : na
plotchar(SIGNALS_EMA_MIDDLE, 'SIGNALS_EMA_MIDDLE')

// ========================  Create MACD ==============================
//
// Getting inputs
fast_length = input(title='MACD Fast', defval=12)
slow_length = input(title='MACD Slow', defval=26)
src = input(title='Source', defval=close)
signal_length = input.int(title='Signal Smoothing', minval=1, maxval=50, defval=9)
sma_source = input.string(title='Oscillator MA Type', defval='EMA', options=['SMA', 'EMA'])
sma_signal = input.string(title='Signal Line MA Type', defval='EMA', options=['SMA', 'EMA'])
// Calculating
fast_ma = sma_source == 'SMA' ? ta.sma(src, fast_length) : ta.ema(src, fast_length)
slow_ma = sma_source == 'SMA' ? ta.sma(src, slow_length) : ta.ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == 'SMA' ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)
hist = macd - signal

//plot MACD SIGNALS
long_shape_MACD = macd >= signal
short_shape_MACD = macd < signal
plotchar(long_shape_MACD, 'long_shape_MACD')
plotchar(short_shape_MACD, 'short_shape_MACD')
//plotshape(long_shape_MACD, style=shape.labelup, location=location.belowbar, color=color.green, size=size.tiny, title="Long Entry", text="L_MACD", textcolor=color.white)
//plotshape(short_shape_MACD, style=shape.labeldown, location=location.abovebar, color=color.red, size=size.tiny, title="Short Entry", text="S_MACD", textcolor=color.white)

//SIGNAL MACD
SIGNALS_MACD = long_shape_MACD == 1 ? true : short_shape_MACD == 1 ? false : na
plotchar(SIGNALS_MACD, 'SIGNALS_MACD ')

// ====================== Create BB BAND ========================================
//
length_BB = input.int(20, minval=1)
src_BB = input(close, title='Source')
mult_BB = input.float(2.0, minval=0.001, maxval=50, title='StdDev')
basis_BB = ta.sma(src_BB, length_BB)
dev_BB = mult_BB * ta.stdev(src_BB, length_BB)
upper_BB = basis_BB + dev_BB
lower_BB = basis_BB - dev_BB
offset = input.int(0, 'Offset', minval=-500, maxval=500)
plot(basis_BB, 'Basis', color=color.new(#FF6D00, 0), offset=offset)
p1_BB = plot(upper_BB, 'Upper', color=color.new(#2962FF, 0), offset=offset)
p2_BB = plot(lower_BB, 'Lower', color=color.new(#2962FF, 0), offset=offset)
fill(p1_BB, p2_BB, title='Background', color=color.rgb(33, 150, 243, 95))

//SIGNAL BB BAND
long_shape_BBBAND = close >= basis_BB  //and SIGNALS_MACD == true//crossover(close,basis_BB)
short_shape_BBBAND = close < basis_BB  //and SIGNALS_MACD == false//crossunder(close,basis_BB)
//plotshape(long_shape_BBBAND, style=shape.labelup, location=location.belowbar, color=color.green, size=size.tiny, title="Long Entry", text="L_BBAND", textcolor=color.white)
//plotshape(short_shape_BBBAND, style=shape.labeldown, location=location.abovebar, color=color.red, size=size.tiny, title="Short Entry", text="S_BBAND", textcolor=color.white)
SIGNALS_BBBAND = long_shape_BBBAND == 1 ? true : short_shape_BBBAND == 1 ? false : na
plotchar(SIGNALS_BBBAND, 'SIGNALS_BBBAND')
plotchar(long_shape_BBBAND, 'long_shape_BBBAND')

//============================ EMA MIDDLE and Basis ===============================
DIF_EMAMID_BASIS = math.abs(math.abs(EMA_MIDDLE_LINE_LONG - basis_BB) / EMA_MIDDLE_LINE_LONG * 100)
plotchar(DIF_EMAMID_BASIS, '%DIF_EMA_MID-BASIS')

DIF_MACD_SIGNALS = math.abs(signal - macd)
plotchar(DIF_MACD_SIGNALS, 'DIF_MACD_SIGNALS')
plotchar(signal, 'signal')
plotchar(macd, 'macd')

// =============================LONG SHORT=============================================================
// >> F. Create Positions
// >> F.1 LONG POSITION

EACHLOTS = input.int(defval=4, title='LOTS', group='POSITION CONFIG')
LEVERAGE = input.int(defval=9, title='Leverage', group='POSITION CONFIG')

//CAL_POSITION_SIZE = (strategy.equity/EACHLOTS) * LEVERAGE
CAL_POSITION_SIZE = 10000 / 1 * LEVERAGE  // TEST
plotchar(CAL_POSITION_SIZE, 'CAL_POSITION_SIZE')
CONTRACT_SIZE = math.round(CAL_POSITION_SIZE / close, 6)
plotchar(CONTRACT_SIZE, 'CONTRACT_SIZE')
plotchar(strategy.equity, 'strategy.equity')

//===========================================MACD1MOREMACD2T=================================================
//test1 = linreg(close, 3, 0) //→ series[float]
//plotchar(test1, "linreg")
MACD1MOREMACD2 = macd > macd[1] ? 1 : macd < macd[1] ? 0 : na
plotchar(MACD1MOREMACD2, 'MACD > MACD 1 ?')

//==================== SUMMARY_SIGNALS ==============================
//

SUMMARY_SIGNALS = SIGNALS_MACD == true and SIGNALS_BBBAND == true and SIGNALS_EMA_MIDDLE == true and MACD1MOREMACD2 == 1 ? true : SIGNALS_MACD == false and SIGNALS_BBBAND == false and SIGNALS_EMA_MIDDLE == false and MACD1MOREMACD2 == 0 ? false : na
LONG_SHAPE = SUMMARY_SIGNALS == true and strategy.position_size <= 0 and ONOFF_LONG == true and window()
SHORT_SHAPE = SUMMARY_SIGNALS == false and strategy.position_size >= 0 and ONOFF_SHORT == true and window()
plotshape(LONG_SHAPE, style=shape.labelup, location=location.belowbar, color=color.new(color.green, 0), size=size.tiny, title='Long Entry', text='LONG', textcolor=color.new(color.white, 0))
plotshape(SHORT_SHAPE, style=shape.labeldown, location=location.abovebar, color=color.new(color.red, 0), size=size.tiny, title='Short Entry', text='SHORT', textcolor=color.new(color.white, 0))
plotchar(SUMMARY_SIGNALS, 'SUMMARY_SIGNALS ')

// ====================== TRAILING STOP ================================
// =====================================================================

trailPerc = input.float(title='Trailing Stop (%)', minval=0.0, step=1, defval=13) * 0.01

//detect what was last signal (long or short)
long_short = 0
long_last = SUMMARY_SIGNALS == true and ONOFF_LONG == true and (nz(long_short[1]) == 0 or nz(long_short[1]) == -1)
short_last = SUMMARY_SIGNALS == false and ONOFF_SHORT == true and (nz(long_short[1]) == 0 or nz(long_short[1]) == 1)
long_short := long_last ? 1 : short_last ? -1 : long_short[1]

//calculate tsl position
longStopPrice = 0.0
shortStopPrice = 0.0
longStopPrice := if long_short == 1  //and strategy.position_size  > 0 
    stopValue = close * (1 - trailPerc)
    math.max(stopValue, longStopPrice[1])
else
    0
shortStopPrice := if long_short == -1  //and strategy.position_size  < 0 
    stopValue = close * (1 + trailPerc)
    math.min(stopValue, shortStopPrice[1])
else
    999999

//plot tsl
plot(long_short == 1 ? longStopPrice : na, style=plot.style_linebr, color=color.new(color.green, 0), linewidth=1, title='Long Trailing Stop')  //2
plot(long_short == -1 ? shortStopPrice : na, style=plot.style_linebr, color=color.new(color.red, 0), linewidth=1, title='Short Trailing Stop')  //3

//remove first bar for SL/TP (you can't enter a trade at bar close THEN hit your SL on that same bar)
longBar1 = ta.barssince(long_last)
longBar2 = longBar1 >= 1 ? true : false
shortBar1 = ta.barssince(short_last)
shortBar2 = shortBar1 >= 1 ? true : false

//check for TSL hit during a bar
longSLhit = long_short == 1 and longBar2 and low < longStopPrice[1] and strategy.position_size > 0 and window()
plotshape(longSLhit, style=shape.labelup, location=location.belowbar, color=color.new(color.gray, 0), size=size.tiny, title='Long TSL', text='Long TSL', textcolor=color.new(color.white, 0))  //4
shortSLhit = long_short == -1 and shortBar2 and high > shortStopPrice[1] and strategy.position_size < 0 and window()
plotshape(shortSLhit, style=shape.labeldown, location=location.abovebar, color=color.new(color.gray, 0), size=size.tiny, title='Short TSL', text='Short TSL', textcolor=color.new(color.white, 0))  //5

//reset long_short if SL/TP hit during bar
long_short := (long_short == 1 or long_short == 0) and longBar2 and longSLhit ? 0 : (long_short == -1 or long_short == 0) and shortBar2 and shortSLhit ? 0 : long_short
// Check Position
if strategy.position_size == 0
    long_short := 0
    long_short
//calculate if TSL has changed from last bar
longDiff = long_short == 1 and longBar2 and longStopPrice != longStopPrice[1] ? true : false
shortDiff = long_short == -1 and shortBar2 and shortStopPrice != shortStopPrice[1] ? true : false
// =====================================================================

//================================== CALL BACK RATE : Trailing STOP =============================
//LONG
CB_long = 0.0
update_cb = 0.0
if SUMMARY_SIGNALS == true and ONOFF_LONG == true or strategy.position_size > 0
    update_cb := close * 1.03
    update_cb
if update_cb != 0
    CB_long := nz(CB_long[1]) == 0 ? update_cb : nz(CB_long[1]) != 0 ? CB_long[1] : 0
    CB_long
plotchar(CB_long, 'CB_long')

//SHORT
CB_short = 0.0
update_cb_short = 0.0
if SUMMARY_SIGNALS == false and ONOFF_SHORT == true or strategy.position_size < 0
    update_cb_short := close * 0.97
    update_cb_short
if update_cb_short != 0
    CB_short := nz(CB_short[1]) == 0 ? update_cb_short : nz(CB_short[1]) != 0 ? CB_short[1] : 0
    CB_short
plotchar(CB_short, 'CB_short')

//LONG HIGHT
close_CB_long = 0.0
if nz(close_CB_long[1]) != 0 and strategy.position_size > 0 and ONOFF_LONG == true
    close_CB_long := close_CB_long[1]
    close_CB_long
if close >= CB_long and CB_long != 0 and strategy.position_size >= 0 and close_CB_long[1] < close
    close_CB_long := close
    close_CB_long
plotchar(close_CB_long, 'close_CB_long')

//SHORT HIGHT
close_CB_short = 0.0
if nz(close_CB_short[1]) != 0 and strategy.position_size < 0 and ONOFF_SHORT == true
    close_CB_short := close_CB_short[1]
    close_CB_short
if close <= CB_short and CB_short != 0 and strategy.position_size <= 0 and (close_CB_short[1] > close or nz(close_CB_short[1]) == 0)
    close_CB_short := close
    close_CB_short
plotchar(close_CB_short, 'close_CB_short')

//=============================delay 5s TiME LONH SHORT===========================================================
plotchar(strategy.position_size, 'strategy.position_size')
timedelay_LONG = 0.0
timecheck_LONG = 0.0
if SUMMARY_SIGNALS == true or strategy.position_size > 0
    timedelay_LONG := time + 300000.0
    timedelay_LONG
if timedelay_LONG != 0
    timecheck_LONG := nz(timecheck_LONG[1]) == 0 ? timedelay_LONG : nz(timecheck_LONG[1]) != 0 ? timecheck_LONG[1] : 0
    timecheck_LONG
plotchar(timecheck_LONG, 'timecheck_LONG')

timedelay_SHORT = 0.0
timecheck_SHORT = 0.0
if SUMMARY_SIGNALS == false or strategy.position_size < 0
    timedelay_SHORT := time + 300000.0
    timedelay_SHORT
if timedelay_SHORT != 0
    timecheck_SHORT := nz(timecheck_SHORT[1]) == 0 ? timedelay_SHORT : nz(timecheck_SHORT[1]) != 0 ? timecheck_SHORT[1] : 0
    timecheck_SHORT
plotchar(timecheck_SHORT, 'timecheck_SHORT')
plotchar(TIME_NOW, 'timenow')

//================== ENTRY  EXIT ================================

if SUMMARY_SIGNALS == true and strategy.position_size <= 0 and (ONOFF_TIME_Delay == true ? time >= timecheck_LONG : true)  and window() //แก้ไข
    if strategy.position_size < 0
        strategy.close('SHORT')  //, alert_message = "CLOSE SHORT"
    if ONOFF_LONG == true
        timecheck_LONG := 0.0
        strategy.entry(id='LONG', direction=strategy.long, qty=CONTRACT_SIZE, alert_message='OPEN LONG')
        //strategy.exit(id="EX. LONG",from_entry = "LONG" , profit = ATR_TP , stop = ATR_SL , alert_message = "{{ticket}} , CLOSE LONG , {{strategy.order.contracts}} , {{strategy.position_size}}")
        //strategy.exit(id="trailng LONG",from_entry = "LONG", stop=longStopPrice )
        strategy.exit(id='SL LONG', from_entry='LONG', stop=close * (1 - 1 / LEVERAGE), alert_message='CLOSE LONG')

// >> F.2 SHORT POSITION
if SUMMARY_SIGNALS == false and strategy.position_size >= 0 and (ONOFF_TIME_Delay == true ? time >= timecheck_SHORT : true) and window() //แก้ไข
    if strategy.position_size > 0
        strategy.close('LONG')  //, alert_message = "CLOSE LONG"
    if ONOFF_SHORT == true
        timecheck_SHORT := 0.0
        strategy.entry(id='SHORT', direction=strategy.short, qty=CONTRACT_SIZE, alert_message='OPEN SHORT')
        //strategy.exit(id="EX SHORT",from_entry = "SHORT" , profit = ATR_TP , stop = ATR_SL , alert_message = "{{ticket}} , CLOSE SHORT , {{strategy.order.contracts}} , {{strategy.position_size}}")
        //strategy.exit(id="trailng SHORT",from_entry = "SHORT", stop=shortStopPrice) 
        strategy.exit(id='SL SHORT', from_entry='SHORT', stop=close * (1 + 1 / LEVERAGE), alert_message='CLOSE SHORT')

// ==================Trailing STOP======================================
if ONOFF_TLS == true and longSLhit == 1 and strategy.position_size > 0 and MACD1MOREMACD2 == 0  //and close > CB_long and CB_long != 0.0
    timecheck_LONG := 0.0
    strategy.close('LONG', alert_message='CLOSE LONG', comment='LONG TSL')
if ONOFF_TLS == true and shortSLhit == 1 and strategy.position_size < 0 and MACD1MOREMACD2 == 1  //and close < CB_short and CB_short != 0.0
    timecheck_SHORT := 0.0
    strategy.close('SHORT', alert_message='CLOSE SHORT', comment='SHORT TSL')
// ======================================================================

// ==================STOP EMA======================================
if ONOFF_EMA_MIDDLE == true and short_shape_EMA_MIDDLE == 1 and strategy.position_size > 0 and close < close_CB_long and close_CB_long != 0.0 and MACD1MOREMACD2 == 0 and DIF_EMAMID_BASIS >= SD_EMA_MIDDLE_STOP
    timecheck_LONG := 0.0
    strategy.close('LONG', alert_message='CLOSE LONG', comment='LONG EMA')
if ONOFF_EMA_MIDDLE == true and long_shape_EMA_MIDDLE == 1 and strategy.position_size < 0 and close > close_CB_short and close_CB_short != 0.0 and MACD1MOREMACD2 == 1 and DIF_EMAMID_BASIS >= SD_EMA_MIDDLE_STOP
    timecheck_SHORT := 0.0
    strategy.close('SHORT', alert_message='CLOSE SHORT', comment='SHORT EMA')
// ======================================================================
//basis_BB
if ONOFF_BB_Basis == true and close <= basis_BB * 1.01 and strategy.position_size > 0 and close < close_CB_long and close_CB_long != 0.0 and MACD1MOREMACD2 == 0
    timecheck_LONG := 0.0
    strategy.close('LONG', alert_message='CLOSE LONG', comment='LONG BB')
if ONOFF_BB_Basis == true and close >= basis_BB * 0.99 and strategy.position_size < 0 and close > close_CB_short and close_CB_short != 0.0 and MACD1MOREMACD2 == 1
    timecheck_SHORT := 0.0
    strategy.close('SHORT', alert_message='CLOSE SHORT', comment='SHORT BB')

